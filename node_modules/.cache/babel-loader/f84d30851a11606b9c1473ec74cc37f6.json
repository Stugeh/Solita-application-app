{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/tuukka/Javascript/Solita-application-app/src/App.js\",\n    _s = $RefreshSig$();\n\n/* eslint react/prop-types: 0 */\nimport './App.css';\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios'; // Run the json-server: npx json-server --port=3001 --watch names.json\n\nconst RenderPerson = ({\n  person\n}) => /*#__PURE__*/_jsxDEV(\"tr\", {\n  children: [/*#__PURE__*/_jsxDEV(\"td\", {\n    children: person.name\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n    children: person.amount\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 5\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 9,\n  columnNumber: 3\n}, this);\n\n_c = RenderPerson;\n\nconst App = () => {\n  _s();\n\n  // The list of people fetched from the json server gets\n  // stored in \"people\" as an array of objects.\n  // \"search\" tracks searchbox state.\n  const [people, setPeople] = useState([]);\n  const [search, setSearch] = useState(''); // array of people that contains the results of the search\n\n  const filteredPeople = search === '' ? people : people.filter(person => person.name.toLowerCase().includes(search.toLowerCase())); // Effect hook to get list of names from json server.\n\n  useEffect(async () => {\n    const persons = await axios.get('http://localhost:3001/names');\n    setPeople(persons.data);\n  }, []);\n\n  const sortByName = () => {\n    const newPeople = [...people.sort((a, b) => a.name > b.name ? 1 : -1)];\n    setPeople(newPeople);\n  }; // First sorts alphabetically before sorting by amount.\n\n\n  const sortByAmount = () => {\n    people.sort((a, b) => a.name < b.name ? 1 : -1);\n    const newPeople = [...people.sort((a, b) => a.amount < b.amount ? 1 : -1)];\n    setPeople(newPeople);\n  };\n\n  const searchHandler = event => {\n    setSearch(event.target.value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \" Name Application \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), \"Search:\", /*#__PURE__*/_jsxDEV(\"input\", {\n      value: search,\n      onChange: searchHandler,\n      type: \"text\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: [\"Names in the list:\", ` ${people.length}`, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), \"Names that match search:\", ` ${filteredPeople.length}`]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: sortByName,\n      type: \"submit\",\n      children: \"Sort by name\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: sortByAmount,\n      type: \"submit\",\n      children: \"Sort by amount\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"NAME\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"AMOUNT\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: filteredPeople.map(person => /*#__PURE__*/_jsxDEV(RenderPerson, {\n          person: person\n        }, person.name, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"Ug+jcIgH2l69mP+h6ua+uzDqWGQ=\");\n\n_c2 = App;\nexport default App;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"RenderPerson\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"sources":["/home/tuukka/Javascript/Solita-application-app/src/App.js"],"names":["React","useState","useEffect","axios","RenderPerson","person","name","amount","App","people","setPeople","search","setSearch","filteredPeople","filter","toLowerCase","includes","persons","get","data","sortByName","newPeople","sort","a","b","sortByAmount","searchHandler","event","target","value","length","map"],"mappings":"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","sourcesContent":["/* eslint react/prop-types: 0 */\nimport './App.css';\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\n// Run the json-server: npx json-server --port=3001 --watch names.json\n\nconst RenderPerson = ({ person }) => (\n  <tr>\n    <td>{person.name}</td>\n    <td>{person.amount}</td>\n  </tr>\n);\n\nconst App = () => {\n  // The list of people fetched from the json server gets\n  // stored in \"people\" as an array of objects.\n  // \"search\" tracks searchbox state.\n  const [people, setPeople] = useState([]);\n  const [search, setSearch] = useState('');\n\n  // array of people that contains the results of the search\n  const filteredPeople = search === '' ? people\n    : people.filter(\n      (person) => person.name.toLowerCase().includes(search.toLowerCase()),\n    );\n\n  // Effect hook to get list of names from json server.\n  useEffect(async () => {\n    const persons = await axios.get('http://localhost:3001/names');\n    setPeople(persons.data);\n  }, []);\n\n  const sortByName = () => {\n    const newPeople = [...people.sort((a, b) => ((a.name > b.name) ? 1 : -1))];\n    setPeople(newPeople);\n  };\n\n  // First sorts alphabetically before sorting by amount.\n  const sortByAmount = () => {\n    people.sort((a, b) => ((a.name < b.name) ? 1 : -1));\n    const newPeople = [...people.sort((a, b) => ((a.amount < b.amount) ? 1 : -1))];\n    setPeople(newPeople);\n  };\n\n  const searchHandler = (event) => {\n    setSearch(event.target.value);\n  };\n\n  return (\n    <div>\n\n      <h1> Name Application </h1>\n\n      Search:\n      <input value={search} onChange={searchHandler} type=\"text\" />\n\n      <h4>\n        Names in the list:\n        {` ${people.length}`}\n        <br />\n        Names that match search:\n        {` ${filteredPeople.length}`}\n      </h4>\n\n      <button onClick={sortByName} type=\"submit\">\n        Sort by name\n      </button>\n      <button onClick={sortByAmount} type=\"submit\">\n        Sort by amount\n      </button>\n\n      <table>\n        <thead>\n          <tr>\n            <th>NAME</th>\n            <th>AMOUNT</th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {\n          filteredPeople.map(\n            (person) => <RenderPerson key={person.name} person={person} />,\n          )\n        }\n        </tbody>\n      </table>\n\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}